generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  
  // User role for admin access
  role          UserRole  @default(USER)
  
  accounts      Account[]
  sessions      Session[]

   // NEW: User can be a patient themselves
  patientProfile Patient?
  
  // MODIFIED: User can submit assessments (as themselves or proxy)
  submittedAssessments Assessment[] @relation("SubmittedBy")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// ===== PATIENT MANAGEMENT =====

model Patient {
  id              String      @id @default(cuid())
  
  // Medical Record Number - Auto-generated, human-readable
  mrn             String      @unique @default(cuid()) // You'll override this with custom logic
  
  // Demographics
  fullName        String
  dateOfBirth     DateTime?
  gender          Gender?
  
  // Contact Information
  email           String?
  phone           String?
  address         String?
  
  // If this patient is also a system user (for SELF assessments)
  userId          String?     @unique
  user            User?       @relation(fields: [userId], references: [id])
  
  // Medical History
  assessments     Assessment[]
  appointments    Appointment[]
  
  // Status
  isActive        Boolean     @default(true)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([mrn])
  @@index([email])
  @@index([phone])
}
// OTP Verification Model
model OtpVerification {
  id          String      @id @default(cuid())
  identifier  String      // phone or email
  otp         String
  expires     DateTime
  verified    Boolean     @default(false)
  attempts    Int         @default(0)
  type        OtpType     @default(EMAIL)
  
  createdAt   DateTime    @default(now())
  
  @@unique([identifier, otp])
}

// Assessment Models
model Assessment {
  id                  String              @id @default(cuid())
  
  // NEW: Assessment tracking number
  assessmentNumber    String              @unique @default(cuid())
  
  // NEW: Link to patient (who assessment is about)
  patientId           String
  patient             Patient             @relation(fields: [patientId], references: [id])
  
  formType            FormType            @default(SELF)
  language            Language            @default(ENGLISH)
  
  // NEW: Who submitted (can be patient themselves or proxy)
  submittedBy         String?
  submitter           User?               @relation("SubmittedBy", fields: [submittedBy], references: [id])
  
  // NEW: Proxy details (only for PROXY submissions)
  proxyRelationship   String?
  proxyName           String?
  proxyEmail          String?
  proxyPhone          String?
  
  responses           AssessmentResponse[]
  
  // Clinical review
  status              AssessmentStatus    @default(SUBMITTED)
  isReviewed          Boolean             @default(false)
  reviewedBy          String?
  reviewedAt          DateTime?
  reviewNotes         String?             @db.Text
  clinicalScore       String?
  recommendations     String?             @db.Text
  
  // NEW: Priority flag
  priority            AssessmentPriority  @default(NORMAL)
  
  submittedAt         DateTime            @default(now())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  appointments        Appointment[]
  notifications       Notification[]
  
  // NEW: Indexes for performance
  @@index([assessmentNumber])
  @@index([patientId])
  @@index([status])
  @@index([submittedAt])
}

model AssessmentResponse {
  id            String     @id @default(cuid())
  assessmentId  String
  questionId    String
  questionText  String     // Store question text for historical purposes
  answerValue   String     // JSON string for complex answers
  answerType    AnswerType
  
  assessment    Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  // NEW FIELDS - ADD THESE
  score         Float?           // Calculated score
  scoreLabel    String?          // Human-readable interpretation

  createdAt     DateTime   @default(now())
}

// Question Management (for dynamic forms)
model QuestionGroup {
  id            String     @id @default(cuid())
  name          String
  nameAr        String     // Arabic translation
  description   String?
  descriptionAr String?    // Arabic translation
  order         Int
  isActive      Boolean    @default(true)

  // NEW FIELDS - ADD THESE
  hasGroupScoring Boolean       @default(false)  // Enable aggregate scoring
  scoringType     ScoringType?                   // Group scoring type
  scoringConfig   String?       @db.Text         // JSON for group scoring
  interpretationRules String?   @db.Text         // Group-level interpretation
  
  // YouTube video for explanations
  videoUrl      String?
  
  questions     Question[]
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Question {
  id              String        @id @default(cuid())
  questionGroupId String
  
  // Question content
  text            String
  textAr          String        // Arabic translation
  description     String?
  descriptionAr   String?       // Arabic translation
  
  // Question configuration
  type            QuestionType
  isRequired      Boolean       @default(false)
  order           Int
  isActive        Boolean       @default(true)
  

  // NEW FIELDS - ADD THESE
  hasScoring      Boolean       @default(false)  // Enable/disable scoring
  scoringType     ScoringType?                   // Type of scoring
  scoringConfig   String?       @db.Text         // JSON scoring rules
  minScore        Float?                         // Minimum score
  maxScore        Float?                         // Maximum score
  scoreUnit       String?                        // e.g., "points", "stage"
  interpretationRules String?   @db.Text         // JSON interpretation ranges

  // Answer options (for multiple choice, etc.)
  options         String?       // JSON string for options with translations
  
  // Validation rules
  validationRules String?       // JSON string for validation rules
  
  questionGroup   QuestionGroup @relation(fields: [questionGroupId], references: [id], onDelete: Cascade)

    // NEW: Define if question is for SELF, PROXY, or BOTH
  applicableFor   FormType[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Notification System
model Notification {
  id           String           @id @default(cuid())
  assessmentId String
  type         NotificationType
  recipient    String           // email address
  subject      String
  content      String           @db.Text
  
  // Status
  sent         Boolean          @default(false)
  sentAt       DateTime?
  error        String?
  
  assessment   Assessment       @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime         @default(now())
}

// Phase 2 Models (Future)
model Appointment {
  id           String           @id @default(cuid())
  // NEW: Link to patient record
  patientId       String
  patient         Patient             @relation(fields: [patientId], references: [id])
  
  
  type         AppointmentType
  status       AppointmentStatus @default(SCHEDULED)
  
  // Appointment details
  scheduledAt  DateTime
  duration     Int              @default(30) // minutes
  notes        String?
  
  // Virtual appointment details
  meetingUrl   String?
  meetingId    String?

   assessmentId String?
  clinicianId  String? 
  createdBy    String?
  language     Language @default(ENGLISH)
  
  // Add these relations:
  assessment   Assessment? @relation(fields: [assessmentId], references: [id])
  reminders    AppointmentReminder[]

  
  
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}
// Add this new model
model AppointmentReminder {
  id            String      @id @default(cuid())
  appointmentId String
  reminderType  String      
  reminderTime  DateTime
  sent          Boolean     @default(false)
  sentAt        DateTime?
  
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum AssessmentPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}



enum ScoringType {
  SIMPLE           // Direct score mapping (FAST)
  WEIGHTED         // Conditional scoring (GDS-15)
  RANGE            // Score ranges
  FORMULA          // Custom formula
  AGGREGATE        // Sum/average across questions
  CONDITIONAL      // Depends on other answers
}

// Enums
enum UserRole {
  USER
  ADMIN
  CLINICAL_STAFF
}

enum OtpType {
  EMAIL
  SMS
  // Will add SMS support with Unifonic later
}

enum FormType {
  SELF
  PROXY
}

enum Language {
  ENGLISH
  ARABIC
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AssessmentStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  COMPLETED
  ARCHIVED
}

enum AnswerType {
  TEXT
  NUMBER
  BOOLEAN
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  DATE
  SCALE
  JSON
}

enum QuestionType {
  TEXT
  TEXTAREA
  NUMBER
  EMAIL
  PHONE
  DATE
  SINGLE_SELECT
  MULTI_SELECT
  CHECKBOX
  RADIO
  SCALE
  BOOLEAN
}

enum NotificationType {
  ASSESSMENT_SUBMITTED
  ASSESSMENT_REVIEWED
  REMINDER
  SYSTEM
}

enum AppointmentType {
  LAB_TESTING
  VIRTUAL_CONSULTATION
  VIDEO_CALL
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}